// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	model "github.com/HitoroOhria/task-executer/domain/value"
	gomock "github.com/golang/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Input mocks base method.
func (m *MockCommand) Input(prompt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", prompt)
	ret0, _ := ret[0].(string)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockCommandMockRecorder) Input(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockCommand)(nil).Input), prompt)
}

// ReadFile mocks base method.
func (m *MockCommand) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockCommandMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockCommand)(nil).ReadFile), path)
}

// RunTask mocks base method.
func (m *MockCommand) RunTask(taskfile string, fullName model.FullTaskName, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{taskfile, fullName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask.
func (mr *MockCommandMockRecorder) RunTask(taskfile, fullName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{taskfile, fullName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockCommand)(nil).RunTask), varargs...)
}

// SelectTaskName mocks base method.
func (m *MockCommand) SelectTaskName(taskfile string) (model.FullTaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskName", taskfile)
	ret0, _ := ret[0].(model.FullTaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskName indicates an expected call of SelectTaskName.
func (mr *MockCommandMockRecorder) SelectTaskName(taskfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskName", reflect.TypeOf((*MockCommand)(nil).SelectTaskName), taskfile)
}
