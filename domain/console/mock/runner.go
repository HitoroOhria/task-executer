// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package mock_console is a generated GoMock package.
package mock_console

import (
	reflect "reflect"

	value "github.com/HitoroOhria/task-executor/domain/value"
	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Input mocks base method.
func (m *MockRunner) Input(prompt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", prompt)
	ret0, _ := ret[0].(string)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockRunnerMockRecorder) Input(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockRunner)(nil).Input), prompt)
}

// ReadFile mocks base method.
func (m *MockRunner) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockRunnerMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockRunner)(nil).ReadFile), path)
}

// RunTask mocks base method.
func (m *MockRunner) RunTask(taskfile string, fullName value.FullTaskName, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{taskfile, fullName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask.
func (mr *MockRunnerMockRecorder) RunTask(taskfile, fullName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{taskfile, fullName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockRunner)(nil).RunTask), varargs...)
}

// SelectTaskName mocks base method.
func (m *MockRunner) SelectTaskName(taskfile string) (value.FullTaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskName", taskfile)
	ret0, _ := ret[0].(value.FullTaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskName indicates an expected call of SelectTaskName.
func (mr *MockRunnerMockRecorder) SelectTaskName(taskfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskName", reflect.TypeOf((*MockRunner)(nil).SelectTaskName), taskfile)
}
