// Code generated by MockGen. DO NOT EDIT.
// Source: printer.go

// Package mock_console is a generated GoMock package.
package mock_console

import (
	reflect "reflect"

	value "github.com/HitoroOhria/task-executor/domain/value"
	gomock "github.com/golang/mock/gomock"
)

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// EndLine mocks base method.
func (m *MockPrinter) EndLine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndLine")
}

// EndLine indicates an expected call of EndLine.
func (mr *MockPrinterMockRecorder) EndLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndLine", reflect.TypeOf((*MockPrinter)(nil).EndLine))
}

// ExecutionTask mocks base method.
func (m *MockPrinter) ExecutionTask(taskfile string, fullName value.FullTaskName, args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{taskfile, fullName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ExecutionTask", varargs...)
}

// ExecutionTask indicates an expected call of ExecutionTask.
func (mr *MockPrinterMockRecorder) ExecutionTask(taskfile, fullName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{taskfile, fullName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionTask", reflect.TypeOf((*MockPrinter)(nil).ExecutionTask), varargs...)
}

// LineBreaks mocks base method.
func (m *MockPrinter) LineBreaks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LineBreaks")
}

// LineBreaks indicates an expected call of LineBreaks.
func (mr *MockPrinterMockRecorder) LineBreaks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LineBreaks", reflect.TypeOf((*MockPrinter)(nil).LineBreaks))
}

// OptionalHeader mocks base method.
func (m *MockPrinter) OptionalHeader() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OptionalHeader")
}

// OptionalHeader indicates an expected call of OptionalHeader.
func (mr *MockPrinterMockRecorder) OptionalHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionalHeader", reflect.TypeOf((*MockPrinter)(nil).OptionalHeader))
}

// RequiredHeader mocks base method.
func (m *MockPrinter) RequiredHeader() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequiredHeader")
}

// RequiredHeader indicates an expected call of RequiredHeader.
func (mr *MockPrinterMockRecorder) RequiredHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiredHeader", reflect.TypeOf((*MockPrinter)(nil).RequiredHeader))
}
